parameters:
services:
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']
    app.event.authentication_success_listener:
        class: App\Event\AuthenticationSuccessListener
        arguments: ["@service_container"]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }

    app.event.authentication_failure_listener:
        class: App\Event\AuthenticationFailureListener
        arguments: ["@service_container","@token.manager"]
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }

    app.event.exception_listener:
        class: App\Event\ExceptionListener
        arguments: ["@exception.logger.monolog"]
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }
    token.manager:
        class: App\Util\Lexik\Token
        public: true
    Symfony\Component\Serializer\Normalizer\PropertyNormalizer:
        arguments:
            $nameConverter: '@serializer.name_converter.camel_case_to_snake_case'
        tags: [serializer.normalizer]
    exception.logger.monolog:
        class: App\Service\Log\ExceptionLogService
        arguments: ["@logger"]
        tags:
            - { name: monolog.logger, channel: exceptionLog }
    controller.logger.monolog:
        class: App\Service\Log\ControllerLogService
        arguments: ["@logger"]
        tags:
            - { name: monolog.logger, channel: controllerLog }